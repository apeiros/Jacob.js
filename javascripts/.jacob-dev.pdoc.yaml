---
id: "Jacob"
type: namespace
line_number: 89
description: |
  JACOB
  =====
  
  Install
  -------
  
  1. Copy javascripts/jacob.js to your projects javascripts directory and link to it.
  2. There's no step 2.
  
  Note: jacob.js is a compilation of all files contained in the lib/jacob
  directory and is therefore all you need. The jacob-dev.js file is the same
  but before minification.
  
  
  Summary
  -------
  
  Jacob is a library, or rather a set of libraries, which will help you with
  all kinds of tasks related to javascript.
  
  The sublibraries are the following:
  
  * Jacob.I18n:
    Translate strings by key, localize dates, arrays and other
    objects.
  * Jacob.Template:
    Interpolate variables in strings like "Hello %{name}"
  * Jacob.HTTP:
    Handle ajax-requests and websockets
  
  
  Examples
  --------
  
  Here a couple of examples, for live examples, take a look at the examples/
  directory.
  
      i18n    = new Jacob.I18n('en');
      barrier = new Jacob.Barrier();
      i18n.load('locales/en.js', barrier.wait());
      i18n.load('locales/en-US.js', barrier.wait());
      barrier.release(function() { // we have to wait for the locales to be loaded
        // assuming the keys 'sites/index/title' and '/greeting' are defined in your locales files
        i18n.translate('/sites/index/title');                                // => "Welcome to CompuGlobalHyperMegaNet!"
        i18n.translate('/sites/%{site}/title', {segments: {site: 'value'}}); // => "Welcome to CompuGlobalHyperMegaNet!"
        i18n.translate('/greeting');                                         // => "Hello %{first_name}!"
        i18n.translate('/greeting', {variables: {first_name: 'Homer'}});     // => "Hello Homer!"
        i18n.localize((new Date()), {format: 'date_only'});                  // => "Sunday, 23. September 2010"
        i18n.localize(123456.78);                                            // => "123.456,78"
        i18n.localize(123456.78, {translator: 'Currency', currency: 'CHF'}); // => "USD 123.456,78"
        i18n.localize([1,2,3]);                                              // => "1, 2 and 3"
        i18n.localize([1,2,3], {connector: 'or'});                           // => "1, 2 or 3"
      });
  
  
  Version
  -------
  
  This is to be considered an early alpha version of Jacob.
  
  
  External Dependencies
  ---------------------
  
  Some of Jacobs sub-libraries currently depend on jQuery for some functionality:
  * Jacob.HTTP
  * Jacob.JSON
  
  
  License
  -------
  
  You can choose between MIT and BSD-3-Clause license.
  License file will be added later.

file: javascripts/jacob-dev.js

---
id: "Jacob.Barrier"
parent_id: "Jacob"
type: class
line_number: 123
description: |
  ## Summary
  
  Barrier lets you invoke multiple asynchronous functions waiting for all to
  complete. This is useful in situations where you have to resolve
  dependencies first.
  
  
  ## Synopsis
  
      barrier = new Jacob.Barrier();
      i18n = new Jacob.I18n('de-CH');
      i18n.load('locale1', barrier.wait());
      i18n.load('locale2', barrier.wait());
      i18n.load('locale3', barrier.wait());
      barrier.release(function() {
        // executed after locale1, locale2 and locale3 have been loaded
      })
  
  
  ## Warning
  
  This library assumes no true concurrency in the javascript interpreter.
  At the time of writing, no javascript interpreter actually offers true
  concurrency, so this is not (yet) an issue. In future, it might be.

file: javascripts/jacob-dev.js

---
id: "new Jacob.Barrier"
parent_id: "Jacob.Barrier"
type: constructor
line_number: 133
description: |
  ## Summary
  
  Creates a new Barrier.

signatures:
 -
  signature: "new Jacob.Barrier()"
file: javascripts/jacob-dev.js

---
id: "Jacob.Barrier#wait"
parent_id: "Jacob.Barrier"
type: instance method
line_number: 159
description: |
  ## Summary
  
  Blocks the barrier until the returned function is invoked.
  
  
  ## Synopsis
  
      barrier = new Jacob.Barrier();
      waiter  = barrier.wait();
      barrier.release(function() { alert("released!"); });
      waiter(); // all waiters have been called, "released!" is displayed

signatures:
 -
  signature: "Jacob.Barrier#wait([id])"
  return_value: "Object"
arguments:
 -
  name: id
  description: >
    An optional identifier. If none is given, a numerical one is generated. You SHOULD NOT manually pass in numeric IDs. Use e.g. strings instead.

file: javascripts/jacob-dev.js

---
id: "Jacob.Barrier#block"
parent_id: "Jacob.Barrier"
type: instance method
line_number: 186
description: |
  ## Summary
  
  Blocks the barrier until the id is cleared using Jacob.Barrier#clear(id).
  
  
  ## Synopsis
  
      barrier  = new Jacob.Barrier();
      block_id = barrier.block();
      barrier.release(function() { alert("released!"); });
      barrier.clear(block_id); // all waiters have been called, "released!" is displayed

signatures:
 -
  signature: "Jacob.Barrier#block([id])"
  return_value: "Integer | id"
arguments:
 -
  name: id
  description: >
    An optional identifier. If none is given, a numerical one is generated. You SHOULD NOT manually pass in numeric IDs. Use e.g. strings instead.

file: javascripts/jacob-dev.js

---
id: "Jacob.Barrier#clear"
parent_id: "Jacob.Barrier"
type: instance method
line_number: 236
description: |
  ## Summary
  
  Clears a block in the barrier, if it was the last one blocking, it
  also invokes Jacob.Barrier#triggerRelease().
  Note: if all blocks are cleared, invoking clear will have no effect.
  
  
  ## Synopsis
  
      barrier  = new Jacob.Barrier();
      block_id = barrier.block();
      barrier.release(function() { alert("released!"); });
      barrier.clear(block_id); // all waiters have been called, "released!" is displayed

signatures:
 -
  signature: "Jacob.Barrier#clear([id])"
  return_value: "Object"
arguments:
 -
  name: id
  description: >
    An optional identifier. If none is given, all blockers are cleared.

file: javascripts/jacob-dev.js

---
id: "Jacob.Barrier#release"
parent_id: "Jacob.Barrier"
type: instance method
line_number: 284
description: |
  ## Summary
  
  Clears a block in the barrier, if it was the last one blocking, it
  also invokes Jacob.Barrier#triggerRelease().
  
  
  ## Synopsis
  
      barrier  = new Jacob.Barrier();
      barrier.release(function() { alert("released!"); });
      barrier.clear(barrier.block()) // all waiters have been called, "released!" is displayed

signatures:
 -
  signature: "Jacob.Barrier#release(callback)"
  return_value: "this"
arguments:
 -
  name: callback
  types: [Function]
  description: >
    A function that should be invoked when all blocks in the barrier are cleared.

file: javascripts/jacob-dev.js

---
id: "Jacob.Codec"
parent_id: "Jacob"
type: mixin
line_number: 307
description: |
  ## Summary
  
    Decode and encode Strings from and to various formats.
  
  
  ## Synopsis
  
      Jacob.Codec.gunzip(string)       // => Object
      Jacob.Codec.base64Encode(string) // => String
      Jacob.Codec.base64Decode(string) // => String

file: javascripts/jacob-dev.js

---
id: "Jacob.Codec.GZipDecode"
parent_id: "Jacob.Codec"
type: class method
line_number: 324
description: |
  ## Summary
  
    Unzips a gzipped string.
    See Jacob.Codec.GZip.gunzip for more information.
  
  
  ## Synopsis
  
      Jacob.Codec.GZipDecode(string)   // => Object

signatures:
 -
  signature: "Jacob.Codec.GZipDecode(string)"
  return_value: "unzipped (String)"
file: javascripts/jacob-dev.js

---
id: "Jacob.Codec.base64Encode"
parent_id: "Jacob.Codec"
type: class method
line_number: 340
description: |
  ## Summary
  
    Decodes a base64 encoded string.
    See Jacob.Codec.Base64.encode for more information.
  
  
  ## Synopsis
  
      Jacob.Codec.base64Encode(string)   // => base64 encoded (String)

signatures:
 -
  signature: "Jacob.Codec.base64Encode(string)"
  return_value: "base64 encoded (String)"
file: javascripts/jacob-dev.js

---
id: "Jacob.Codec.base64Decode"
parent_id: "Jacob.Codec"
type: class method
line_number: 356
description: |
  ## Summary
  
    Decodes a base64 decoded string.
    See Jacob.Codec.Base64.decode for more information.
  
  
  ## Synopsis
  
      Jacob.Codec.base64Decode(string)   // => decoded (String)

signatures:
 -
  signature: "Jacob.Codec.base64Decode(string)"
  return_value: "base64 decoded (String)"
file: javascripts/jacob-dev.js

---
id: "Jacob.Codec.Base64"
parent_id: "Jacob.Codec"
type: mixin
line_number: 381
description: |
  ## Summary
  
  Encode/Decode base64.
  Also take a look at Jacob.Codec.
  
  
  ## Synopsis
  
      Jacob.Codec.Base64.encode("Some string")      // => "U29tZSBTdHJpbmc="
      Jacob.Codec.Base64.decode("U29tZSBTdHJpbmc=") // => "Some String"
  
  
  ## ToDo
  
  * Find the library this was derived from to give proper credit.
  * Move the private functions to Jacob.Util.

file: javascripts/jacob-dev.js

---
id: "Jacob.Codec.Base64.encode"
parent_id: "Jacob.Codec.Base64"
type: class method
line_number: 404
description: |
  ## Summary
  
  Encodes a String in Base64 (http://en.wikipedia.org/wiki/Base64).
  
  
  ## Synopsis
  
      Jacob.Codec.Base64.encode("Some string")      // => "U29tZSBTdHJpbmc="

signatures:
 -
  signature: "Jacob.Codec.Base64.encode(input)"
  return_value: "String"
arguments:
 -
  name: input
  types: [String]
  description: >
    The string to encode in base64

file: javascripts/jacob-dev.js

---
id: "Jacob.Codec.Base64.decode"
parent_id: "Jacob.Codec.Base64"
type: class method
line_number: 450
description: |
  ## Summary
  
  Decodes a base64 encoded String (http://en.wikipedia.org/wiki/Base64).
  
  
  ## Synopsis
  
      Jacob.Codec.Base64.decode("U29tZSBTdHJpbmc=") // => "Some String"

signatures:
 -
  signature: "Jacob.Codec.Base64.decode(input[, unicode=false])"
  return_value: "String"
arguments:
 -
  name: input
  types: [String]
  description: >
    The base64 encoded string to decode

 -
  name: unicode
  types: [Boolean]
  description: >
    Whether the input string is in unicode

file: javascripts/jacob-dev.js

---
id: "Jacob.Codec.Base64._decodeAsArray"
parent_id: "Jacob.Codec.Base64"
type: class method
line_number: 504
description: |
  ## Summary
  
  Converts an input string encoded in base64 to an array of integers whose
  values represent the decoded string's characters' bytes.
  
  
  ## Synopsis
  
      var base64hello = Jacob.Codec.Base64.encode("Hello");
      Jacob.Codec.Base64._decodeAsArray(base64hello);
      // => [72, 101, 108, 108, 111]

signatures:
 -
  signature: "Jacob.Codec.Base64._decodeAsArray(input)"
  return_value: "Array"
arguments:
 -
  name: input
  types: [String]
  description: >
    The String to convert to an array of Integers

file: javascripts/jacob-dev.js

---
id: "Jacob.GZip"
parent_id: "Jacob"
type: class
line_number: 657
description: |
  ## Summary
  
  GZip decompression
  
  
  ## Synopsis
  
      Jacob.GZip.gunzip(string) // => String
  
  
  ## ToDo
  
  Find the library this was derived from to give proper credit.

file: javascripts/jacob-dev.js

---
id: "new Jacob.GZip"
parent_id: "Jacob.GZip"
type: constructor
line_number: 668
description: |
  ## Summary
  
  See Jacob.GZip.gunzip.

signatures:
 -
  signature: "new Jacob.GZip()"
arguments:
 -
  name: data
  types: [Array, String]
  description: >
    The bytestream to decompress

file: javascripts/jacob-dev.js

---
id: "Jacob.GZip.gunzip"
parent_id: "Jacob.GZip"
type: class method
line_number: 704
description: |
  ## Summary
  
  Unzips the gzipped data of the 'data' argument.

signatures:
 -
  signature: "Jacob.GZip.gunzip(data)"
  return_value: "String"
arguments:
 -
  name: data
  types: [Array, String]
  description: >
    The bytestream to decompress. Either an array of Integers between 0 and 255, or a String.

file: javascripts/jacob-dev.js

---
id: "Jacob.HTTP"
parent_id: "Jacob"
type: class
line_number: 1414
description: |
  ## Summary
  
  Handles http connections. Currently it is a wrapper around jQuery and
  exists only for the purpose to let Jacob users not depend on jQuery
  themselves.
  
  
  ## Synopsis
  
      Jacob.HTTP.get('/foo', {success: function() { ... }});
  
  
  ## External Dependencies
  
  Jacob.HTTP currently depends on jQuery.

file: javascripts/jacob-dev.js

---
id: "Jacob.HTTP.get"
parent_id: "Jacob.HTTP"
type: class method
line_number: 1441
description: |
  ## Summary
  
  Performs a get request.
  
  
  ## Options
  
  * success (Function): A callback to invoke upon success (HTTP Status 200).
  * error (Function): A callback to invoke upon failure (No response or HTTP Status 3xx).
  
  
  ## Synopsis
  
      Jacob.HTTP.get('/foo', {success: function() { ... }});

signatures:
 -
  signature: "Jacob.HTTP.get(url[, options])"
  return_value: "undefined"
arguments:
 -
  name: url
  types: [String]
  description: >
    The URL from which to request data using GET.

 -
  name: options
  types: [Object]
  description: >
    An options hash, see Options

file: javascripts/jacob-dev.js

---
id: "Jacob.I18n"
parent_id: "Jacob"
type: class
line_number: 1519
description: |
  ## Summary
  
  I18n handles translation of strings and localization of objects, like
  dates, numbers, monetary expressions, arrays etc.
  
  
  ## Synopsis
  
      i18n    = new Jacob.I18n('en');
      barrier = new Jacob.Barrier();
      i18n.load('locales/en.js', barrier.wait());
      i18n.load('locales/en-US.js', barrier.wait());
      barrier.release(function() { // we have to wait for the locales to be loaded
        // assuming the keys 'sites/index/title' and '/greeting' are defined in your locales files
  
        i18n.translate('/sites/index/title');
        // => "Welcome to CompuGlobalHyperMegaNet!"
  
        // create a shortcut
        t = i18n.t();
        t('/sites/index/title');
        // => "Welcome to CompuGlobalHyperMegaNet!"
        t('/sites/%{site}/title', {segments: {site: 'value'}});
        // => "Welcome to CompuGlobalHyperMegaNet!"
        t('/greeting');
        // => "Hello %{first_name}!"
        t('/greeting', {variables: {first_name: 'Homer'}});
        // => "Hello Homer!"
        i18n.localize((new Date()), {format: 'date_only'});
        // => "Sunday, 23. September 2010"
  
        // create a shortcut
        l = i18n.l()
        l((new Date()), {format: 'date_only'});
        // => "Sunday, 23. September 2010"
        l(123456.78);
        // => "123.456,78"
        l(123456.78, {translator: 'Currency', currency: 'CHF'});
        // => "USD 123.456,78"
        l([1,2,3]);
        // => "1, 2 and 3"
        l([1,2,3], {connector: 'or'});
        // => "1, 2 or 3"
      });
  
  
  ## Done
  
  * variables in keys
  * variables in translations
  * translations
  * localizations
  * fallbacks
  * locale cascading (e.g. de-CH -> de -> generic)
  * merge loading
  * scope
  * count (pluralization)
  
  
  ## ToDo
  
  * i18n.withOptions(options, function() { i18n.translate(...); ... });
  * Options:
    * locale
    * exception

file: javascripts/jacob-dev.js

---
id: "new Jacob.I18n"
parent_id: "Jacob.I18n"
type: constructor
line_number: 1539
description: |
  ## Summary
  
  Creates new Jacob.I18n instance. The given locale is automatically
  cascaded.
  
  
  ## Synopsis
  
      var i18n = new Jacob.I18n();

signatures:
 -
  signature: "new Jacob.I18n([locale])"
arguments:
 -
  name: locale
  types: [String]
  description: >
    A locale-string, e.g. "de" or "de-CH". As default the following values are tried in order: Jacob.I18n.defaultLocale, the xml:lang attribute of the html tag, the lang attribute in the html tag, 'generic'

file: javascripts/jacob-dev.js

---
id: "Jacob.I18n.t"
parent_id: "Jacob.I18n"
type: class method
line_number: 1576
description: |
  ## Summary
  
  Creates a shortcut function for Jacob.I18n#translate
  
  
  ## Synopsis
  
      var t    = i18n.t({scope: 'pages/index');
      t('title') // Same i18n.translate('pages/index/title');
  
  
  ## WARNING
  
  The options parameter is currently not implemented and therefore ignored.

signatures:
 -
  signature: "Jacob.I18n.t([options])"
  return_value: "Function"
arguments:
 -
  name: options
  types: [Object]
  description: >
    An options hash, which is passed on to Jacob.I18n#translate after merging it with the

file: javascripts/jacob-dev.js

---
id: "Jacob.I18n#l"
parent_id: "Jacob.I18n"
type: instance method
line_number: 1603
description: |
  ## Summary
  
  Creates a shortcut function for Jacob.I18n#localize
  
  
  ## Synopsis
  
      var l = i18n.l({locale: 'en');
      l(new Date()) // => Same i18n.localize((new Date()), {locale: 'en'});
  
  ## WARNING
  
  The options parameter is currently not implemented and therefore ignored.

signatures:
 -
  signature: "Jacob.I18n#l([options])"
  return_value: "Function"
arguments:
 -
  name: options
  types: [Object]
  description: >
    An options-hash. See Options.

file: javascripts/jacob-dev.js

---
id: "Jacob.I18n#cascadeLocales"
parent_id: "Jacob.I18n"
type: instance method
line_number: 1634
description: |
  ## Summary
  
  Calculates the locale cascade for a given locale and returns it.
  E.g. for 'en-US', the cascade is ['en-US', 'en', 'generic']. Jacob.I18n
  tries those locales in that order to resolve a given key.
  
  
  ## Synopsis
  
      var i18n    = i18n.l({locale: 'en');
      l(new Date()) // => Same i18n.localize((new Date()), {locale: 'en'});
  
  ## WARNING
  
  The options parameter is currently not implemented and therefore ignored.

signatures:
 -
  signature: "Jacob.I18n#cascadeLocales([locale=this.locale()])"
  return_value: "Array"
arguments:
 -
  name: locale
  types: [Object]
  description: >
    The locale to calculate the cascade of.

file: javascripts/jacob-dev.js

---
id: "Jacob.I18n#locale"
parent_id: "Jacob.I18n"
type: instance method
line_number: 1663
description: |
  ## Summary
  
  Gets or sets the locale of this Jacob.I18n instance.
  If a locale argument is given, the locale is set to that.
  Returns the locale on which this Jacob.I18n is set.
  
  
  ## Synopsis
  
      i18n.locale();        // => 'en-US'
      i18n.locale('en-GB'); // => 'en-GB'
      i18n.locale();        // => 'en-GB'

signatures:
 -
  signature: "Jacob.I18n#locale([locale])"
  return_value: "current locale (String)"
arguments:
 -
  name: locale
  types: [String]
  description: >
    The locale to set this I18n instance to.

file: javascripts/jacob-dev.js

---
id: "Jacob.I18n#scope"
parent_id: "Jacob.I18n"
type: instance method
line_number: 1704
description: |
  ## Summary
  
  Gets or sets the scope (see Scope) of this Jacob.I18n instance.
  If a scope argument is given and begins with a '/', then scope is set to
  that. If a scope argument is given and does not begin with a '/', then
  The scope is built by joining the current scope with the argument.
  Returns the scope on which this Jacob.I18n is set.
  You should be careful about setting the scope as it influences all
  lookups.
  
  
  ## Synopsis
  
      i18n.scope();        // => '/'
      i18n.scope('sites'); // => '/sites'
      i18n.scope('index'); // => '/sites/index'
      i18n.scope('/');     // => '/sites/index'
  
  
  ## Scope
  
  The scope is used when resolving relative keys, the absolute key is then
  built by joining the scope and the key, e.g. with a scope of '/sites' and
  a key 'current/title', the resulting absolute key would be
  '/sites/current/title'.
  The standard scope of Jacob.I18n is '/'.

signatures:
 -
  signature: "Jacob.I18n#scope([newScope])"
  return_value: "current scope (String)"
arguments:
 -
  name: scope
  types: [String]
  description: >
    The scope to set this I18n instance to.

file: javascripts/jacob-dev.js

---
id: "Jacob.I18n#translations"
parent_id: "Jacob.I18n"
type: instance method
line_number: 1730
description: |
  ## Summary
  
  Returns a hash containing all locales and the corresponding flattened
  hash of all keys and their translations in that locale.
  Flattened means that - no matter how deep the hashes have been when the
  locales were loaded - there are no nested hashes in it.
  
  
  ## Synopsis
  
      i18n.translations(); // => {"generic": {"/some/key": "value"}, "en": {}}

signatures:
 -
  signature: "Jacob.I18n#translations()"
  return_value: "Object"
file: javascripts/jacob-dev.js

---
id: "Jacob.I18n#hasKey"
parent_id: "Jacob.I18n"
type: instance method
line_number: 1779
description: |
  ## Summary
  
  If a key exists, it returns an object with the locale and the absolute key
  in the form {locale: ..., key: ...}. If the key can't be found, it returns
  false. The options hash accepted is the same as for Jacob.I18n#translate.
  
  
  ## Synopsis
  
      i18n.hasKey('some/%{kind}/key', {segments: {kind: 'existing'}});
      // => {key: '/some/existing/key', locale: "en-US"}
      i18n.hasKey('some/%{kind}/key', {segments: {kind: 'unknown'}});
      // => false

signatures:
 -
  signature: "Jacob.I18n#hasKey([options])"
  return_value: "false | Object"
arguments:
 -
  name: options
  types: [Object]
  description: >
    The same options hash as for Jacob.I18n#translate

file: javascripts/jacob-dev.js

---
id: "Jacob.JSON"
parent_id: "Jacob"
type: mixin
line_number: 2544
description: |
  ## Summary
  
    Parse JSON Strings to objects and dump objects to JSON Strings
  
  
  ## Synopsis
  
      Jacob.JSON.parse(string) -> Object
      Jacob.JSON.dump(object)  -> String
  
  
  ## External Dependencies
  
  Jacob.JSON currently depends on jQuery.

file: javascripts/jacob-dev.js

---
id: "Jacob.Template"
parent_id: "Jacob"
type: class
line_number: 2573
description: |
  ## Summary
  
  Jacob.Template replaces sequences in strings by identifier or position.
  
  
  ## Synopsis
  
      template = new Jacob.Template('Hello %{entity}!');
      template.identifiers()                     // => ['entity']
      template.interpolate({'entity': 'World'}); // => 'Hello World!'
      Jacob.Template.interpolate('Hello %{entity}!');

file: javascripts/jacob-dev.js

---
id: "new Jacob.Template"
parent_id: "Jacob.Template"
type: constructor
line_number: 2586
description: |
  - templateString (String): A string to interpolate. Variables use the
    sequence %{variablename}. Example: "Hello %{firstName}". In this string,
    firstName is a variable that can be interpolated.
  - options (Object): A hash with options. Valid options are:
    * missingKey: A function that is invoked upon a missing key.
    * superfluousKey: A function that is invoked upon a superfluous key.

signatures:
 -
  signature: "new Jacob.Template(templateString, options)"
file: javascripts/jacob-dev.js

---
id: "Jacob.Template.interpolate"
parent_id: "Jacob.Template"
type: class method
line_number: 2612
description: |
  - templateString (String): The template string to interpolate the variables into.
  - options (Object):        Same options as the Jacob.Template constructor accepts.
  - variables (Object):      The variables to interpolate into the template.

signatures:
 -
  signature: "Jacob.Template.interpolate(templateString[, options], variables)"
  return_value: "String"
file: javascripts/jacob-dev.js

---
id: "Jacob.Util"
parent_id: "Jacob"
type: mixin
line_number: 2668
description: |
  # Summary
  
  Provides some utility functions.

file: javascripts/jacob-dev.js

---
id: "Jacob.Util.clone"
parent_id: "Jacob.Util"
type: class method
line_number: 2679
description: |
  ## Summary
  
  Copies an object, copying all its properties. The copy is shallow.

signatures:
 -
  signature: "Jacob.Util.clone(source)"
  return_value: "Object"
arguments:
 -
  name: source
  types: [Object]
  description: >
    The object to clone.

file: javascripts/jacob-dev.js

---
id: "Jacob.Util.extend"
parent_id: "Jacob.Util"
type: class method
line_number: 2693
description: |
  ## Summary
  
  Copies all properties from one object (source) to another (target).

signatures:
 -
  signature: "Jacob.Util.extend(target, source)"
  return_value: "Object"
arguments:
 -
  name: source
  types: [Object]
  description: >
    The object from which to copy the properties.

 -
  name: target
  types: [Object]
  description: >
    The object which to extend with the properties from source.

file: javascripts/jacob-dev.js